// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.7.1.0
//      SpecFlow Generator Version:1.7.0.0
//      Runtime Version:4.0.30319.269
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace PetStoreSpecFlow
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.7.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Discount Rates Exercise")]
    public partial class DiscountRatesExerciseFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "DiscountRate.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Discount Rates Exercise", @" Choose one acceptance criteria from the story below.  Think
 about which criteria might be most interesting to use in collaboration with business owners, or which might have the most risk.

 Write a BDD Acceptance Test for that criteria.  Re-use as much of the steps from the pre-existing scenarios as possible.

 Identify which steps of the test re-use existing automation, and which steps need programmer help to automate

 Repeat.

As a store manager
I want to set discount rates
So that I can do marketing and sales

Acceptance Criteria
 1.  Pets should not be discounted below $5
 2.  Exotic Pets (Emu, Llamas, Jaguars) should not be discounted at all
 3.  Discount rates over 50% should be rejected.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Discount Happy Path")]
        public virtual void DiscountHappyPath()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Discount Happy Path", ((string[])(null)));
#line 21
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "petName",
                        "price"});
            table1.AddRow(new string[] {
                        "Dog",
                        "25"});
            table1.AddRow(new string[] {
                        "Cat",
                        "45"});
#line 22
 testRunner.Given("the following data exists:", ((string)(null)), table1);
#line 26
 testRunner.When("I set the discount rate to 10%");
#line 27
 testRunner.When("I enter Dog and search for price");
#line 28
 testRunner.Then("the result should be 22.50");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Multiple Discounts")]
        [NUnit.Framework.TestCaseAttribute("Dog", "22.50", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Cat", "39.50", new string[0])]
        public virtual void MultipleDiscounts(string petName, string price, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Multiple Discounts", exampleTags);
#line 30
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "petName",
                        "price"});
            table2.AddRow(new string[] {
                        "Dog",
                        "25"});
            table2.AddRow(new string[] {
                        "Cat",
                        "45"});
#line 32
testRunner.Given("the following data exists:", ((string)(null)), table2);
#line 36
 testRunner.When("I set the discount rate to 10%");
#line 37
 testRunner.When(string.Format("I enter {0} and search for price", petName));
#line 38
 testRunner.Then(string.Format("the result should be {0}", price));
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Pre-existing Dog Search")]
        public virtual void Pre_ExistingDogSearch()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Pre-existing Dog Search", ((string[])(null)));
#line 48
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "petName",
                        "price"});
            table3.AddRow(new string[] {
                        "Dog",
                        "25"});
            table3.AddRow(new string[] {
                        "Cat",
                        "45"});
#line 49
 testRunner.Given("the following data exists:", ((string)(null)), table3);
#line 53
 testRunner.When("I enter Dog and search for price");
#line 54
 testRunner.Then("the result should be 25");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#endregion
